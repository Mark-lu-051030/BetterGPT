package use_case;

import com.theokanning.openai.completion.chat.ChatMessage;
import data_access.GptApiClient;
import data_access.ConversationRepository;
import entity.Conversation;
import entity.Message;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

/**
 * The ChatService class handles the processing of user input within a conversation.
 * It interacts with the GPT API to generate responses and manages the conversation's messages.
 */
public class ChatService {
    private final GptApiClient gptApiClient;
    private final ConversationRepository conversationRepository;
    private final Conversation conversation;

    /**
     * Constructs a ChatService with the specified GPT API client, conversation repository, and conversation.
     *
     * @param gptApiClient           the GPT API client used to interact with the OpenAI service
     * @param conversationRepository the repository for managing conversation data
     * @param conversation           the current conversation context in which messages are being exchanged
     */
    public ChatService(GptApiClient gptApiClient, ConversationRepository conversationRepository, Conversation conversation) {
        this.gptApiClient = gptApiClient;
        this.conversationRepository = conversationRepository;
        this.conversation = conversation;
    }

    /**
     * Handles the user's input by adding it to the conversation, sending the conversation history
     * to the GPT API for a response, and then adding the response to the conversation.
     *
     * @param userInput the input provided by the user
     * @return the response generated by the GPT API
     */
    public String handleUserInput(String userInput) {
        // Add user's input message to the conversation
        Message userMessage = new Message(null, conversation.getId(), userInput, LocalDateTime.now(), "user");
        conversation.addMessage(userMessage);
        conversationRepository.addMessage(conversation.getId(), userMessage);

        // Prepare the conversation history
        List<ChatMessage> conversationHistory = conversation.getMessages().stream()
                .map(msg -> new ChatMessage(msg.getRole(), msg.getContent()))
                .collect(Collectors.toList());

        // Get response from OpenAI
        String response = gptApiClient.getChatCompletion(conversationHistory);

        // Add the response message to the conversation
        Message botMessage = new Message(null, conversation.getId(), response, LocalDateTime.now(), "assistant");
        conversation.addMessage(botMessage);
        conversationRepository.addMessage(conversation.getId(), botMessage);

        return response;
    }
}
